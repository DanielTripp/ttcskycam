#!/usr/bin/env python

import sys, subprocess, pipes, os, tempfile, numpy
from misc import *

n = 1
optcompare = True
optlevel = 0
args = sys.argv[1:]
for i, arg in enumerate(args):
	if arg.startswith('--n='):
		n = int(arg.split('=')[1])
	elif arg == '--nooptcompare':
		optcompare = False
	elif arg.startswith('--optlevel='):
		optlevel = int(arg.split('=')[1])
	else:
		cmd_list = args[i:]
		break

if len(cmd_list) < 1:
	sys.exit('Need at least one argument: the filename of a program.  (Some optional arguments can preceed that.)')

os.environ['PROF_OPT'] = '1'

TIMEFORMAT_PREFIX = '> CPU times: '
os.environ['TIMEFORMAT'] = TIMEFORMAT_PREFIX+'%U %S'

def run_cmd(exit_early_, print_output_, disable_opt_):
	output_filename = tempfile.mkstemp()[1] # Using this temp file to capture the output of the program instead 
		# of reading it into memory b/c calc-reports.py (which I often use this program to profile) hangs sometimes if I don't. 
	try:
		cmd_str = '{ time %s ; } >%s 2>&1' % (' '.join(pipes.quote(x) for x in cmd_list), pipes.quote(output_filename))
		env = os.environ.copy()
		if exit_early_:
			env['PROF_EXIT_EARLY'] = '1'
		if disable_opt_:
			env['PROF_DISABLE_OPT_LEVEL_%d' % optlevel] = '1'
		retcode = subprocess.call(cmd_str, shell=True, executable='/bin/bash', env=env, stderr=subprocess.STDOUT)
		with open(output_filename) as fin:
			output = fin.read()
		if print_output_ or retcode != 0:
			print output, 
		if retcode != 0:
			raise Exception('Process returned %d' % retcode)
		for line in output.splitlines()[::-1]:
			if line.startswith(TIMEFORMAT_PREFIX):
				cputimes_str = line[len(TIMEFORMAT_PREFIX):].strip()
				break
		cputimes_sum = sum(float(x) for x in cputimes_str.split(' '))
		return cputimes_sum
	finally:
		os.remove(output_filename)

if optcompare:
	run_cmd(False, False, False)
	opt_part2_cputimes = []
	for i in range(n):
		full_cputime = run_cmd(False, True, False)
		part1_cputime = run_cmd(True, True, False)
		part2_cputime = full_cputime - part1_cputime
		opt_part2_cputimes.append(part2_cputime)
		print '> opt run #%d (of %d) time: %.3f' % (i, n, part2_cputime)
	noopt_part2_cputimes = []
	for i in range(n):
		full_cputime = run_cmd(False, True, True)
		part1_cputime = run_cmd(True, True, True)
		part2_cputime = full_cputime - part1_cputime
		noopt_part2_cputimes.append(part2_cputime)
		print '> noopt run #%d (of %d) time: %.3f' % (i, n, part2_cputime)

	if n == 1:
		opt_time = opt_part2_cputimes[0]
		noopt_time = noopt_part2_cputimes[0]
		ratio = opt_part2_cputimes[0]/noopt_part2_cputimes[0]
		print '> CPU times: opt: %.3f seconds, noopt: %.3f seconds' % (opt_time, noopt_time)
		print '> Ratio: %.2f' % (ratio)
	else:
		def get_stddev_over_mean(times_):
			return numpy.std(numpy.array(times_))/numpy.mean(numpy.array(times_))
		opt_mean = average(opt_part2_cputimes)
		opt_stddev_over_mean = get_stddev_over_mean(opt_part2_cputimes)
		noopt_mean = average(noopt_part2_cputimes)
		noopt_stddev_over_mean = get_stddev_over_mean(noopt_part2_cputimes)
		print '> CPU time, avg over %d runs, opt:    %.3f seconds.  (std. dev / mean: %.2f)' % (n, opt_mean, opt_stddev_over_mean)
		print '> indiv times                opt:    %s' % ['%.3f' % t for t in opt_part2_cputimes]
		print '> CPU time, avg over %d runs, noopt:  %.3f seconds.  (std. dev / mean: %.2f)' % (n, noopt_mean, noopt_stddev_over_mean)
		print '> indiv times                noopt:  %s' % ['%.3f' % t for t in noopt_part2_cputimes]
		print '> Ratio: %.2f' % (opt_mean/noopt_mean)
else:
	run_cmd(False, False, False)
	part2_cputimes = []
	for i in range(n):
		full_cputime = run_cmd(False, True, False)
		part1_cputime = run_cmd(True, True, False)
		part2_cputime = full_cputime - part1_cputime
		part2_cputimes.append(part2_cputime)
		print '> run #%d (of %d) time %.3f' % (i, n, part2_cputime)

	if n == 1:
		print '> CPU time: %.3f' % (part2_cputimes[0])
	else:
		stddev_over_mean = numpy.std(numpy.array(part2_cputimes))/numpy.mean(numpy.array(part2_cputimes))
		print '> CPU time (averaged over %d runs): %.3f seconds.  (std. dev / mean: %.5f)' % (n, average(part2_cputimes), stddev_over_mean)
		print '> indiv times                     :  %s' % ['%.3f' % t for t in part2_cputimes]


