#!/usr/bin/env python

import sys, subprocess, pipes, os, filecmp
from misc import *

optlevel = 0
moniker = None
args = sys.argv[1:]
for i, arg in enumerate(args):
	if arg.startswith('--optlevel='):
		optlevel = int(arg.split('=')[1])
	elif arg.startswith('--m='):
		moniker = arg.split('=')[1]
	else:
		cmd_list = args[i:]
		break

if len(cmd_list) < 2:
	sys.exit('Need at least one argument: the filename of a program.  (Some optional arguments can preceed that.)')

os.putenv('PROF_OPT', '1')

def run_cmd(disable_opt_):
	moniker_filename_part = ('%s-' % moniker if moniker else '')
	opt_or_not_filename_part = ('noopt' if disable_opt_ else 'opt')
	output_filename = 'd-%slevel-%d-%s' % (moniker_filename_part, optlevel, opt_or_not_filename_part)
	if os.path.exists(output_filename):
		os.remove(output_filename)
	with open(output_filename, 'w') as fout:
		os.putenv('PROF_DISABLE_OPT_LEVEL_%d' % optlevel, str(int(disable_opt_)))
		try:
			subprocess.check_call(cmd_list, stdout=fout, stderr=fout)
		except subprocess.CalledProcessError, e:
			if os.path.exists(output_filename):
				subprocess.check_call(['cat', output_filename])
			raise
	return output_filename

opt_output_filename = run_cmd(False)
printerr('Finished opt run.')
if count_lines(opt_output_filename) < 150:
	for i in xrange(10):
		printerr('----------------- WARNING: not many lines in output -----------------')
noopt_output_filename = run_cmd(True)
printerr('Finished noopt run.')

files_are_identical = filecmp.cmp(noopt_output_filename, opt_output_filename)

if files_are_identical:
	print 'Outputs are identical.'
	print 'tail:'
	subprocess.check_call(['tail', opt_output_filename])
else:
	subprocess.check_call(['vimdiff', noopt_output_filename, opt_output_filename])

